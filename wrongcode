import taichi as ti
import os
import math
import numpy as np
import matplotlib.pyplot as plt
from pyevtk.hl import pointsToVTK

real = ti.f32
ti.init(default_fp=real, arch=ti.gpu, flatten_if=True)

dim = 2
#n_particles = 8192
n_solid_particles = 0
n_actuators = 0
n_grid = 128
dx = 1 / n_grid
inv_dx = 1 / dx
dt = 1e-3
p_vol = 1
E = 10
# TODO: update
mu = E
mu2 = E*2 
la = E
max_steps = 2048
steps = 1024
gravity = 3.8
target = [0.8, 0.2]

scalar = lambda: ti.field(dtype=real)
vec = lambda: ti.Vector.field(dim, dtype=real)
mat = lambda: ti.Matrix.field(dim, dim, dtype=real)

actuator_id = ti.field(ti.i32)
particle_type = ti.field(ti.i32)
x, v = vec(), vec()
grid_v_in, grid_m_in = vec(), scalar()
grid_v_out = vec()
C, F = mat(), mat()

loss = scalar()

n_sin_waves = 4
weights = scalar()
weight2 = scalar()
bias = scalar()
bias2 = scalar()
x_avg = vec()

actuation2 = scalar()
actuation = scalar()
actuation_omega = 10
act_strength = 5
N=3
acts = scalar()
acts2 = scalar()

def allocate_fields():
    ti.root.dense(ti.ijk, (n_actuators, n_sin_waves, N)).place(weights,weight2)
    ti.root.dense(ti.i, n_actuators).place(bias,bias2)
    ti.root.dense(ti.ij, (max_steps, n_actuators)).place(actuation,actuation2)
    ti.root.dense(ti.i, n_particles).place(actuator_id, particle_type)
    ti.root.dense(ti.k, max_steps).dense(ti.l, n_particles).place(acts, acts2, x, v, C, F)
    ti.root.dense(ti.ij, n_grid).place(grid_v_in, grid_m_in, grid_v_out)
    ti.root.place(loss, x_avg)
    ti.root.lazy_grad()


@ti.kernel
def clear_grid():
    for i, j in grid_m_in:
        grid_v_in[i, j] = [0, 0]
        grid_m_in[i, j] = 0
        grid_v_in.grad[i, j] = [0, 0]
        grid_m_in.grad[i, j] = 0
        grid_v_out.grad[i, j] = [0, 0]


@ti.kernel
def clear_particle_grad():
    # for all time steps and all particles
    for f, i in x:
        x.grad[f, i] = [0, 0]
        v.grad[f, i] = [0, 0]
        C.grad[f, i] = [[0, 0], [0, 0]]
        F.grad[f, i] = [[0, 0], [0, 0]]


@ti.kernel
def clear_actuation_grad():
    for t, i in actuation:
        actuation[t, i] = 0.0
    for t, i in actuation2:
        actuation2[t, i] = 0.0


@ti.kernel
def p2g(f: ti.i32):
    for p in range(n_particles):
        base = ti.cast(x[f, p] * inv_dx - 0.5, ti.i32)  
        fx = x[f, p] * inv_dx - ti.cast(base, ti.i32)
        w = [0.5 * (1.5 - fx)**2, 0.75 - (fx - 1)**2, 0.5 * (fx - 0.5)**2]
        new_F = (ti.Matrix.diag(dim=2, val=1) + dt * C[f, p]) @ F[f, p]
        J = (new_F).determinant()
        
        if particle_type[p] == 2:  # fluid
            sqrtJ = ti.sqrt(J)
            new_F = ti.Matrix([[sqrtJ, 0], [0, sqrtJ]])

        F[f + 1, p] = new_F
        r, s = ti.polar_decompose(new_F)

        act_id = actuator_id[p]

        act = actuation[f, ti.max(0, act_id)] * act_strength
        act2 = actuation2[f, ti.max(0, act_id)] * act_strength
        if act_id == -1:
            act = 0.0
            act2 = 0.0
        acts[f,p] = act 
        acts2[f,p] = act2
        # ti.print(act)

        A = ti.Matrix([[0.0, 0.0], [0.0, 1.0]]) * act + ti.Matrix([[1.0, 0.0], [0.0, 0.0]]) * act2
        cauchy = ti.Matrix([[0.0, 0.0], [0.0, 0.0]])
        mass = 0.0
        '''
        if particle_type[p] == 2:
            mass = 4
            cauchy = ti.Matrix([[1.0, 0.0], [0.0, 0.1]]) * (J - 1) * E
        '''
        if particle_type[p] == 2:
            mass = 1
            cauchy = 2 * mu2 * (new_F - r) @ new_F.transpose() + \
                     ti.Matrix.diag(2, la * (J - 1) * J)
        else:
            mass = 1
            cauchy = 2 * mu * (new_F - r) @ new_F.transpose() + \
                     ti.Matrix.diag(2, la * (J - 1) * J)

        cauchy += new_F @ A @ new_F.transpose()
        stress = -(dt * p_vol * 4 * inv_dx * inv_dx) * cauchy
        affine = stress + mass * C[f, p]
        for i in ti.static(range(3)):
            for j in ti.static(range(3)):
                offset = ti.Vector([i, j])
                dpos = (ti.cast(ti.Vector([i, j]), real) - fx) * dx
                weight = w[i](0) * w[j](1)
                grid_v_in[base + offset] += weight * (mass * v[f, p] + affine @ dpos)
                grid_m_in[base + offset] += weight * mass


bound = 3
coeff = 0.5


@ti.kernel
def grid_op():
    for i, j in grid_m_in:
        inv_m = 1 / (grid_m_in[i, j] + 1e-10)
        v_out = inv_m * grid_v_in[i, j]
        v_out[1] -= dt * gravity
        if i < bound and v_out[0] < 0:
            v_out[0] = 0
            v_out[1] = 0
        if i > n_grid - bound and v_out[0] > 0:
            v_out[0] = 0
            v_out[1] = 0
        if j < bound and v_out[1] < 0:
            v_out[0] = 0
            v_out[1] = 0
            normal = ti.Vector([0.0, 1.0])
            lsq = (normal**2).sum()
            if lsq > 0.5:
                if ti.static(coeff < 0):
                    v_out[0] = 0
                    v_out[1] = 0
                else:
                    lin = (v_out.transpose() @ normal)(0)
                    if lin < 0:
                        vit = v_out - lin * normal
                        lit = vit.norm() + 1e-10
                        if lit + coeff * lin <= 0:
                            v_out[0] = 0
                            v_out[1] = 0
                        else:
                            v_out = (1 + coeff * lin / lit) * vit
        if j > n_grid - bound and v_out[1] > 0:
            v_out[0] = 0
            v_out[1] = 0
        grid_v_out[i, j] = v_out


@ti.kernel
def g2p(f: ti.i32):
    for p in range(n_particles):
        base = ti.cast(x[f, p] * inv_dx - 0.5, ti.i32)
        fx = x[f, p] * inv_dx - ti.cast(base, real)
        w = [0.5 * (1.5 - fx)**2, 0.75 - (fx - 1.0)**2, 0.5 * (fx - 0.5)**2]
        new_v = ti.Vector([0.0, 0.0])
        new_C = ti.Matrix([[0.0, 0.0], [0.0, 0.0]])

        for i in ti.static(range(3)):
            for j in ti.static(range(3)):
                dpos = ti.cast(ti.Vector([i, j]), real) - fx
                g_v = grid_v_out[base(0) + i, base(1) + j]
                weight = w[i](0) * w[j](1)
                new_v += weight * g_v
                new_C += 4 * weight * g_v.outer_product(dpos) * inv_dx 

        if particle_type[p]==1:
            v[f + 1, p] = new_v
        x[f + 1, p] = x[f, p] + dt * v[f + 1, p]
        C[f + 1, p] = new_C


@ti.kernel
def compute_actuation(t: ti.i32):
    for i in range(n_actuators):
        act = 0.0
        for j in ti.static(range(n_sin_waves)):
            act += weights[i, j] * ti.cos(actuation_omega * t * dt + 2 * math.pi / n_sin_waves * j)
            #act += weights[i, j] * ti.sin(actuation_omega * t * dt)
        act += bias[i]
        actuation[t, i] = ti.tanh(act)
    for i in range(n_actuators):
        act2 = 0.0
        for j in ti.static(range(n_sin_waves)):
            act2 += weight2[i, j] * ti.cos(actuation_omega * t * dt + 2 * math.pi / n_sin_waves * j)
            #act += weights[i, j] * ti.sin(actuation_omega * t * dt)
        act2 += bias2[i]
        actuation2[t, i] = ti.tanh(act2)
    

@ti.kernel
def compute_actuation_Fs(t: ti.i32):
    for i in range(n_actuators):
        act = 0.0
        for k in range(N):
            for j in ti.static(range(n_sin_waves)):
                act += weights[i, j, k] * ti.sin(actuation_omega * k * t * dt + 2 * math.pi / n_sin_waves * j)
                #act += weights[i, j] * ti.sin(actuation_omega * t * dt)
        act += bias[i]
        actuation[t, i] = ti.tanh(act)
    for i in range(n_actuators):
        act2 = 0.0
        for k in range(N):
            for j in ti.static(range(n_sin_waves)):
                act2 += weight2[i, j, k] * ti.sin(actuation_omega * k * t * dt + 2 * math.pi / n_sin_waves * j)
                #act += weights[i, j] * ti.sin(actuation_omega * t * dt)
        act2 += bias2[i]
        actuation2[t, i] = ti.tanh(act2)

@ti.kernel
def compute_actuation_NN(t: ti.i32):
    for i in range(n_actuators):
        act = 0.0
        for j in range(N):
            for k in ti.static(range(n_sin_waves)):
                act += weights[i, j, k] * ti.sin(actuation_omega * k * t * dt + 2 * math.pi / n_sin_waves * j)
                #act += weights[i, j] * ti.sin(actuation_omega * t * dt)
        act += bias[i]
        actuation[t, i] = ti.tanh(act)
    for i in range(n_actuators):
        act2 = 0.0
        for k in range(N):
            for j in ti.static(range(n_sin_waves)):
                act2 += weight2[i, j, k] * ti.sin(actuation_omega * k * t * dt + 2 * math.pi / n_sin_waves * j)
                #act += weights[i, j] * ti.sin(actuation_omega * t * dt)
        act2 += bias2[i]
        actuation2[t, i] = ti.tanh(act2)


@ti.kernel
def compute_x_avg():
    for i in range(n_particles):
        contrib = 0.0
        if particle_type[i] == 1:
            contrib = 1.0 / n_solid_particles
        ti.atomic_add(x_avg[None],contrib * x[steps - 1, i])
        #x_avg[None].atomic_add(contrib * x[steps - 1, i])


@ti.kernel
def compute_loss():
    dist = x_avg[None][0]
    loss[None] = -dist


@ti.ad.grad_replaced
def advance(s):
    clear_grid()
    compute_actuation_Fs(s)
    p2g(s)
    grid_op()
    g2p(s)


@ti.ad.grad_for(advance)
def advance_grad(s):
    clear_grid()
    p2g(s)
    grid_op()

    g2p.grad(s)
    grid_op.grad()
    p2g.grad(s)
    compute_actuation_Fs.grad(s)


def forward(total_steps=max_steps):
    # simulation
    for s in range(total_steps - 1):
        advance(s)
    x_avg[None] = [0, 0]
    compute_x_avg()
    compute_loss()


class Scene:
    def __init__(self):
        self.n_particles = 0
        self.n_solid_particles = 0
        self.x = []
        self.actuator_id = []
        self.particle_type = []
        self.offset_x = 0
        self.offset_y = 0
    
    def add_cir(self,x,y,r,actuation, ptype=1):
        global n_particles
        r_count = int(r /dx) *2
        real_r = r/r_count
        for i in range (r_count):
            for j in range(72):
                self.x.append([
                    x + ((i+0.5) * real_r) * ti.cos(2 * math.pi * j /72) + self.offset_x,
                    y + ((i+0.5) * real_r) * ti.sin(2 * math.pi * j /72) + self.offset_y
                ])
                self.actuator_id.append(actuation)
                self.particle_type.append(ptype)
                self.n_particles += 1
                self.n_solid_particles += int(ptype == 1 )
    
    def add_hocir(self, x, y, r, rh, n_min, n_max, actuation, ptype=1):
        r_count = int(int(r /dx) * 2)
        rh_count = int(int(rh/dx) * 2)
        real_rh = rh/rh_count
        for i in range (rh_count):
            if i >= r_count:
                for j in np.linspace(n_min,n_max,2*(n_max-n_min)):
                    self.x.append([
                        x + ((i+0.5) * real_rh) * ti.cos(2 * math.pi * j /72) + self.offset_x,
                        y + ((i+0.5) * real_rh) * ti.sin(2 * math.pi * j /72) + self.offset_y
                    ])
                    self.actuator_id.append(actuation)
                    self.particle_type.append(ptype)
                    self.n_particles += 1
                    self.n_solid_particles += int(ptype == 1 )

    def add_slop(self,x,y,w,thea,actuation, ptype=0):
        h = math.tan(thea)*w
        w_count = int(int(w/dx)*2)
        h_count = int(int(h/dx)*2)
        real_w = w/w_count
        real_h = h/h_count
        for i in range (w_count):
            for j in range(h_count):
                #if (x + (i + 0.5)*real_w) < (math.sin()
                    self.x.append([
                        x + (i + 0.5)*real_w  ,
                        y + (j + 0.5)*real_h
                    ])
            self.actuator_id.append(actuation)
            self.particle_type.append(ptype)
            self.n_particles += 1
            self.n_solid_particles += int(ptype==1 )

    def add_fixed_slope(self, x, y, l, degree ,actuation, ptype=0):
        l_count = int(int(l/dx)*2)
        real_l=l / l_count
        for i in range (l_count):
            self.x.append([
                x + (i + 0.5) * real_l *ti.cos(2 * math.pi * degree / 360) ,
                y + (i + 0.5) * real_l *ti.sin(2 * math.pi * degree / 360)
            ])
            self.actuator_id.append(actuation)
            self.particle_type.append(ptype)
            self.n_particles += 1
            self.n_solid_particles += int(ptype==1 )

    def add_rect(self, x, y, w, h, actuation, ptype=1):
        if ptype == 0:
            assert actuation == -1
        global n_particles
        w_count = int(w / dx) * 2
        h_count = int(h / dx) * 2
        real_dx = w / w_count
        real_dy = h / h_count
        for i in range(w_count):
            for j in range(h_count):
                self.x.append([
                    x + (i + 0.5) * real_dx + self.offset_x,
                    y + (j + 0.5) * real_dy + self.offset_y
                ])
                self.actuator_id.append(actuation)
                self.particle_type.append(ptype)
                self.n_particles += 1
                self.n_solid_particles += int(ptype == 1 )

    def set_offset(self, x, y):
        self.offset_x = x
        self.offset_y = y

    def finalize(self):
        global n_particles, n_solid_particles
        n_particles = self.n_particles
        n_solid_particles = self.n_solid_particles
        print('n_particles', n_particles)
        print('n_solid', n_solid_particles)

    def set_n_actuators(self, n_act):
        global n_actuators
        n_actuators = n_act


def fish(scene):
    scene.add_rect(0.025, 0.025, 0.95, 0.1, -1, ptype=0)
    scene.add_rect(0.1, 0.2, 0.15, 0.05, -1)
    scene.add_rect(0.1, 0.15, 0.025, 0.05, 0)
    scene.add_rect(0.125, 0.15, 0.025, 0.05, 1)
    scene.add_rect(0.2, 0.15, 0.025, 0.05, 2)
    scene.add_rect(0.225, 0.15, 0.025, 0.05, 3)
    scene.set_n_actuators(4)


def robot_muti(scene):
    px=0.05
    py=0.1
    inR=0.07
    outR=0.1
    scene.set_offset(0.1, 0.03)
    scene.add_cir(0.05, 0.1,inR, -1)
    scene.add_hocir(px, py, inR, outR,0,3, 0)
    scene.add_hocir(px, py, inR, outR,6,9, 1)
    scene.add_hocir(px, py, inR, outR,12,15, 2)
    scene.add_hocir(px, py, inR, outR,18,21, 3)
    scene.add_hocir(px, py, inR, outR,24,27, 4)
    scene.add_hocir(px, py, inR, outR,30,33, 5)
    scene.add_hocir(px, py, inR, outR,36,39, 6)
    scene.add_hocir(px, py, inR, outR,42,45, 7)
    scene.add_hocir(px, py, inR, outR,48,51, 8)
    scene.add_hocir(px, py, inR, outR,54,57, 9)
    scene.add_hocir(px, py, inR, outR,60,63,10)
    scene.add_hocir(px, py, inR, outR,66,69,11)
    scene.set_n_actuators(12)

def robot(scene):
    scene.set_offset(0.1, 0.03)
    scene.add_cir(0.05, 0.1, 0.07, -1)
    scene.add_hocir(0.05, 0.1, 0.07, 0.1,0,6, 0)
    scene.add_hocir(0.05, 0.1, 0.07, 0.1,6,12, 1)
    scene.add_hocir(0.05, 0.1, 0.07, 0.1,12,18, 2)
    scene.add_hocir(0.05, 0.1, 0.07, 0.1,18,24, 3)
    scene.add_hocir(0.05, 0.1, 0.07, 0.1,24,30, 4)
    scene.add_hocir(0.05, 0.1, 0.07, 0.1,30,36, 5)
    scene.add_hocir(0.05, 0.1, 0.07, 0.1,36,42, 6)
    scene.add_hocir(0.05, 0.1, 0.07, 0.1,42,48, 7)
    scene.add_hocir(0.05, 0.1, 0.07, 0.1,48,54, 8)
    scene.add_hocir(0.05, 0.1, 0.07, 0.1,54,60, 9)
    scene.add_hocir(0.05, 0.1, 0.07, 0.1,60,66, 10)
    scene.add_hocir(0.05, 0.1, 0.07, 0.1,66,72,11)
    scene.set_n_actuators(12)

def cir_soft_robot(scene):
    px=0.05
    py=0.08
    inR=0.01
    outR=0.07
    scene.set_offset(0.1, 0.03)
    scene.add_cir(px,py,inR,-1,1)
    scene.add_hocir(px, py, inR, outR,0,3,0)
    scene.add_hocir(px, py, inR, outR,9,12,1)
    scene.add_hocir(px, py, inR, outR,18,21,2)
    scene.add_hocir(px, py, inR, outR,27,30,3)
    scene.add_hocir(px, py, inR, outR,36,39,4)
    scene.add_hocir(px, py, inR, outR,45,48,5)
    scene.add_hocir(px, py, inR, outR,54,57,6)
    scene.add_hocir(px, py, inR, outR,63,66,7)
    scene.add_hocir(px, py, outR, outR+0.01,0,72,-1,1)
    scene.set_n_actuators(8)
    

def slope(scene):
    #scene.add_fixed_slope( 0.0, 0.02, 0.25, 0 , -1 ,0)
    scene.add_fixed_slope( 0.2, 0.02, 0.6, 3 , -1 ,0)

def stair(scene):
    #scene.add_fixed_slope( 0.0, 0.02, 0.25, 0 , -1 ,ptype=0)
    #scene.add_rect(-0.1,-0.03,0.35,0.02,-1,ptype=0)
    scene.add_rect(0.15,-0.01,0.15,0.02,-1,ptype=0)
    scene.add_rect(0.25,0.01,0.15,0.02,-1,ptype=0)
    scene.add_rect(0.35,0.03,0.15,0.02,-1,ptype=0)

def floor(scene):
    scene.add_rect(-0.1,-0.03,1,0.02,-1,ptype=0)

gui = ti.GUI("Differentiable MPM", (640, 640), background_color=0xFFFFFF)


def visualize(s, folder):
    
    aid = actuator_id.to_numpy()
    colors = np.empty(shape=n_particles, dtype=np.uint32)
    particles = x.to_numpy()[s]
    for i in range(n_particles):
        color = 0x111111
        if aid[i] != -1:
            act = actuation[s - 1, int(aid[i])]
            act2 = actuation2[s - 1, int(aid[i])]
            color = ti.rgb_to_hex((0.5 - act - act2, 0.5 - abs(act + act2), 0.5 + act +act2))
        colors[i] = color
    gui.circles(pos=particles, color=colors, radius=1.5)
    #gui.line((0.05, 0.02), (0.95, 0.02), radius=3, color=0x0)
    
    filepath = "movie"
    vtkpath = "vtk" 
    os.getcwd()
    if not os.path.exists(filepath):
        os.makedirs(filepath)
    if not os.path.exists(vtkpath):
        os.makedirs(vtkpath)
    os.makedirs(folder, exist_ok=True)
    gui.show(f'{folder}/{s:04d}.png')

    # # check array dimension when converted back to numpy
    # sys.exit()
    xCoordinate = np.zeros(n_particles)
    yCoordinate = np.zeros(n_particles)
    zCoordinate = np.zeros(n_particles)
    Vx = np.zeros(n_particles)
    Vy = np.zeros(n_particles)
    Vz = np.zeros(n_particles)
    actx = np.zeros(n_particles)
    acty = np.zeros(n_particles)
    stress = np.zeros(n_particles)
    # the reason I splot them as the vtk writer only 
    # accept "CONTIGUOUS" file due to the storage issue. (If you just pick the column)
    xCoordinate[:] = x.to_numpy()[s,:,0]
    yCoordinate[:] = x.to_numpy()[s,:,1]
    #zCoordinate[:] = 0*x.to_numpy()[s,:]
    Vx[:] = v.to_numpy()[s,:,0]
    Vy[:] = v.to_numpy()[s,:,1]
    actx[:] = acts.to_numpy()[s,:]
    acty[:] = acts2.to_numpy()[s,:]
    stress[:] = (acty[:]-actx[:])/abs(actx[:]-acty[:])*(actx[:]**2 + acty[:]**2)**(1/2)
    #Vz[:] = 0*v.to_numpy()[s,:]
    #zCoordinate[:] = material.to_numpy()[:]
    # sys.exit() # abortion point just for debugging
    pointsToVTK("./vtk/points"f'{gui.frame:06d}', xCoordinate, yCoordinate, zCoordinate, 
                data = {"stress" : stress})



def main():
    # initialization
    scene = Scene()
    #robot(scene)
    robot_muti(scene)
    #cir_soft_robot(scene)
    floor(scene)
    #slope(scene)
    stair(scene)
    scene.finalize()
    allocate_fields()

    for i in range(n_actuators):
        for k in range(N):
            for j in range(n_sin_waves):
                weights[i, j, k] = np.random.randn() * 0.01

    for i in range(scene.n_particles):
        x[0, i] = scene.x[i]
        F[0, i] = [[1, 0], [0, 1]]
        actuator_id[i] = scene.actuator_id[i]
        particle_type[i] = scene.particle_type[i]

    losses = []
    for iter in range(12001):
        with ti.ad.Tape(loss):
            forward()
        l = loss[None]
        losses.append(l)
        print('i=', iter, 'loss=', l)
        learning_rate = 0.1

        for i in range(n_actuators):
            for k in range(N):
                for j in range(n_sin_waves):
                    # print(weights.grad[i, j])
                    weights[i, j, k] -= learning_rate * weights.grad[i, j, k]
                    weight2[i, j, k] -= learning_rate * weight2.grad[i, j, k]
            bias[i] -= learning_rate * bias.grad[i]
            bias2[i] -= learning_rate * bias2.grad[i]

        if iter % 4000 == 0:
            # visualize
            forward(2048)
            for s in range(1, 2048, 32):
                visualize(s, 'diffmpm/iter{:03d}/'.format(iter))


            
    # ti.profiler_print()
    plt.title("Optimization of Initial Velocity")
    plt.ylabel("Loss")
    plt.xlabel("Gradient Descent Iterations")
    plt.plot(losses)
    plt.show()



if __name__ == '__main__':
    main()
